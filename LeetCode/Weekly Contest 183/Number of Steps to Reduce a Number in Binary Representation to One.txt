class Solution {
public:

    string addBinary(string a, string b) 
{ 
    string result = ""; // Initialize result 
    int s = 0;          // Initialize digit sum 
  
    // Traverse both strings starting from last 
    // characters 
    int i = a.size() - 1, j = b.size() - 1; 
    while (i >= 0 || j >= 0 || s == 1) 
    { 
        // Comput sum of last digits and carry 
        s += ((i >= 0)? a[i] - '0': 0); 
        s += ((j >= 0)? b[j] - '0': 0); 
  
        // If current digit sum is 1 or 3, add 1 to result 
        result = char(s % 2 + '0') + result; 
  
        // Compute carry 
        s /= 2; 
  
        // Move to next digits 
        i--; j--; 
    } 
    return result; 
} 
    
    
    int numSteps(string s) {
        
      string temp =s;
        int steps =0;
    reverse(temp.begin(), temp.end());
        while(true)
        {   
            if(temp.size() ==1)
                break;
            
            else if(temp[0] =='0')
            {
                
             bool flag=false;   
            //checking for single one;
                int count=0;
                for(int i=0; i<temp.size(); i++)
                    if(temp[i] == '1')
                        count++;
                if(count <=1)
                    flag=true;
                
            //waiting for 1st set
            int x=0;
            for(x=0; x<temp.size(); x++)
                if(temp[x] != '1')
                        steps++;
                else break;
                
            //contains only 1 one
                if(flag)
                    break;
                
            //making of a new string
            string str="";
                for(int i=x; i<temp.size(); i++){
                    str += temp[i];
                }
                
             temp = str;   
            }
            
            else{
                 reverse(temp.begin(), temp.end());
                //adding 1 to string;
                
                temp = addBinary(temp, "1");
                steps++;
                
                 reverse(temp.begin(), temp.end());
            }
        }
        return steps;
    }
};